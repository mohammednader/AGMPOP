#pragma checksum "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\Cycles\_CreateCycle_Products.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5bcc23431a9e66fcb448782ee7370aeca2e03491"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Cycles__CreateCycle_Products), @"mvc.1.0.view", @"/Views/Cycles/_CreateCycle_Products.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Cycles/_CreateCycle_Products.cshtml", typeof(AspNetCore.Views_Cycles__CreateCycle_Products))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\_ViewImports.cshtml"
using AGMPOP.Web;

#line default
#line hidden
#line 2 "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\_ViewImports.cshtml"
using AGMPOP.Web.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5bcc23431a9e66fcb448782ee7370aeca2e03491", @"/Views/Cycles/_CreateCycle_Products.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c3344144602cec692e91fef16bcf12fc0a4de791", @"/Views/_ViewImports.cshtml")]
    public class Views_Cycles__CreateCycle_Products : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 119, true);
            WriteLiteral("<style>\r\n    #lstProducts, #product-filter-field {\r\n        max-height: 55vh;\r\n        overflow-y: auto;\r\n    }\r\n\r\n    ");
            EndContext();
            BeginContext(120, 1000, true);
            WriteLiteral(@"@keyframes shake {
        0% {
            transform: translate(1px, 1px) rotate(0deg);
        }

        25% {
            transform: translate(-1px, -2px) rotate(-1deg);
        }

        50% {
            transform: translate(1px, -1px) rotate(1deg);
        }

        75% {
            transform: translate(3px, 1px) rotate(-1deg);
        }

        100% {
            transform: translate(1px, -2px) rotate(-1deg);
        }
    }

    .shake-element {
        animation: shake 0.3s;
        animation-iteration-count: 1;
    }
</style>

<div>
    <div class=""container-fluid"" id=""product-tab-container"">
        <div class=""row"">
            <div class=""col-12 col-sm-6 col-md-8 row border-right"">
                <div class=""col-12"" style=""border-bottom:1px solid rgba(0, 0, 0, 0.125); padding-bottom:20px"">
                    <input type=""text"" id=""txtSearchProduct"" class=""form-control"" placeholder=""Search for products..."" />
                </div>
");
            EndContext();
            BeginContext(2122, 1139, true);
            WriteLiteral(@"                <div class=""col-6 col-sm-9 pt-4 px-4"">
                    <p class=""font-weight-bold"" id=""productCount""></p>
                    <div id=""lstProducts"" class=""list-group""></div>
                </div>
            </div>
            <div class=""col-12 col-sm-6 col-md-4 px-5"">
                <h6 class=""font-weight-bold"">Selected <small>(<span id=""selectedProductsCount"">0</span>)</small></h6>
                <div id=""lstSelectedProducts"" class=""mt-3 list-group"">
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    $(() => {
      //  getAllProductTypes();

        if (CycleDepartment == 0) {
            getAllDepartments();
        }
        getAllProducts();
        /*$(document).on('change', '.chkProduct', e => {
            debugger;
            toggleSelectProduct(e.target);
        });*/
        $('#txtSearchProduct').on('keyup', e => {
             searchTextProducts($('#txtSearchProduct').val());
         });
        $(doc");
            WriteLiteral("ument).on(\'keyup\', \'.txtQuantity\', e => {\r\n            validateQuantity(e.target);\r\n        });\r\n    });\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
