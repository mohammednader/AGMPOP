#pragma checksum "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\Territory\_PartialIndex.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "71b6a305238b2cff3a87415c58942ed5a6d9b144"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Territory__PartialIndex), @"mvc.1.0.view", @"/Views/Territory/_PartialIndex.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Territory/_PartialIndex.cshtml", typeof(AspNetCore.Views_Territory__PartialIndex))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\_ViewImports.cshtml"
using AGMPOP.Web;

#line default
#line hidden
#line 2 "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\_ViewImports.cshtml"
using AGMPOP.Web.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"71b6a305238b2cff3a87415c58942ed5a6d9b144", @"/Views/Territory/_PartialIndex.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c3344144602cec692e91fef16bcf12fc0a4de791", @"/Views/_ViewImports.cshtml")]
    public class Views_Territory__PartialIndex : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\Territory\_PartialIndex.cshtml"
  
    ViewData["Title"] = "_PartialIndex";
    Layout = null;

#line default
#line hidden
            BeginContext(71, 146, true);
            WriteLiteral("\r\n<input type=\"text\" id=\"geo-tree_q\" value=\"\" class=\"form-control mb-md mb-4\" placeholder=\"Search\">\r\n\r\n    <div id=\"geo-tree\">\r\n\r\n    </div>\r\n\r\n\r\n");
            EndContext();
            BeginContext(234, 319, true);
            WriteLiteral(@"
<script>


    function LoadExtOrgTree() {
        $('#geo-tree')
            .jstree({
                ""core"": {
                    ""animation"": 0,
                    ""check_callback"": true,
                    'force_text': true,
                    ""themes"": { """": true },
                    'data': ");
            EndContext();
            BeginContext(554, 26, false);
#line 27 "E:\TFS\POPAGM\AGMPOP_Core\AGMPOP.Web\Views\Territory\_PartialIndex.cshtml"
                       Write(Html.Raw(ViewBag.TreeData));

#line default
#line hidden
            EndContext();
            BeginContext(580, 5632, true);
            WriteLiteral(@"

                },
                ""types"": {
                    ""#"": { ""max_children"": 10, ""max_depth"": 20, ""valid_children"": [""root""] },
                    ""root"": { ""icon"": ""fas fa-suitcase text-success"", ""valid_children"": [""default""] },
                    ""default"": { ""icon"": ""fas fa-suitcase text-info"", ""valid_children"": [""default"", ""file""] },
                    ""file"": { ""icon"": ""fas fa-user"", ""valid_children"": [] }

                },
                ""plugins"": [""contextmenu"", ""dnd"", ""search"", ""state"", ""types"", ""wholerow""]
                ,
                ""contextmenu"": {
                    ""items"": function (node) {
                        var defaultItems = $.jstree.defaults.contextmenu.items();
                      //  console.log(""default items : "" + JSON.stringify(defaultItems));
                        delete defaultItems.ccp;

                        return defaultItems;
                    }
                }
            });
    };


</script>
 
 
<script>
");
            WriteLiteral(@"
    $(function () {

   

              LoadExtOrgTree();

        //search
        var to = false;
        $('#geo-tree_q').keyup(function () {
            if (to) { clearTimeout(to); }
            to = setTimeout(function () {
                var v = $('#geo-tree_q').val();
                $('#geo-tree').jstree(true).search(v);
            }, 250);
        });


        //Rename
        $('#geo-tree')
            // listen for event
            .on('rename_node.jstree', function (e, data) {
             //   console.log(data.node);
                var dataToSend = JSON.stringify(data.node);
             //   console.log(dataToSend);
                $.ajax({
                    url: '/Territory/Create',
                    type: 'POST',
                    data: { str: dataToSend },
                    dataType: 'json',
                    success: function (data) {
                        if (data != null) {
 
                            if (data.nodeId ==0 ) {
           ");
            WriteLiteral(@"                     PartialTerritoies();
                                Swal.fire({
                                    text: data.message,
                                    icon: 'success',
                                })
                            } else {
                                PartialTerritoies();

                                Swal.fire({
                                    text: data.message,
                                    icon: 'error',
                                })
                            }
                    
 
                        }
                    },
                    error: function () {
                        alert('Error in Create or Edit');
                    }
                });
            })
            // create the instance
            .jstree();

        //************************************************
        $('#geo-tree')
            // listen for event
            .on('delete_node.jstree', function (e, data) {");
            WriteLiteral(@"
                //console.log(data.node);
                //var dataToSend = JSON.stringify(data.node);
                //var _id = data.node.id;

                    Swal.fire({
                     text: ""Remove Territory!"",
                        icon: 'error',
                    showCancelButton: true,
                        confirmButtonColor: '#d33',
                    cancelButtonColor: '#888',
                    confirmButtonText: 'Yes, remove it!'


                    // when press yes remove
                }).then((result) => {
                    if (result.value) {
                        $.ajax({
                            url: '/Territory/Delete/' + data.node.id,
                            dataType: 'json',
                            type: ""GET"",
                            success: function (data) {
                                if (data != null) {
                                    // when remove done
                                    if (data.success) {");
            WriteLiteral(@"
                                        Swal.fire({
                                           text: data.message,
                                            icon: 'success',
                                        }
              
                                        ).then(
                                            function () {
                                                PartialTerritoies();
                                            }
                                        );
                                    }
                                    // when cant remove [there are child]
                                    else {
                                        Swal.fire({
                                            text: data.message,
                                            icon: 'error',
                                        }).then(
                                            function () {
                                                PartialTerritoies();
");
            WriteLiteral(@"                                            }
                                        );
                                    }
                                }
                            },
                        });
                    }
                    // when cancel sweet alert
                    else {
                        PartialTerritoies();
                    }

                })

            })
            // create the instance
          .jstree();
    });

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
